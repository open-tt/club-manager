---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
  schemas:
    resource_creation_success:
      type: object
      properties:
        success:
          type: boolean
        newId:
          type: integer
    resource_creation_failure:
      type: object
      properties:
        success:
          type: boolean
        messages:
          type: array
          items:
            type: string
    registration_success:
      type: object
      properties:
        success:
          type: boolean
        newUserId:
          type: integer
    registration_failure:
      type: object
      properties:
        success:
          type: boolean
        messages:
          type: array
          items:
            type: string
    partial_user_for_tournament:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        rating:
          type: integer
        USATTID?:
          type: string
paths:
  "/authenticate":
    post:
      summary: Create user token
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: Get a token for user authentication
          content: {}
        '401':
          description: Authorization failed with bad credentials
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
  "/orgs":
    post:
      summary: Creates New Org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Org created successfully
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                org_name:
                  type: string
              required:
              - user_id
              - org_name
    get:
      summary: Search in Orgs
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: org_name
        in: query
        required: false
        schema:
          type: string
      - name: owner_id
        in: query
        required: false
        schema:
          type: string
      - name: addr_1
        in: query
        required: false
        schema:
          type: string
      - name: city
        in: query
        required: false
        schema:
          type: string
      - name: state
        in: query
        required: false
        schema:
          type: string
      - name: zip
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Search in Orgs
          content: {}
  "/orgs/{id}":
    put:
      summary: Update an Org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Org Updated
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                org_name:
                  type: string
                is_enabled:
                  type: boolean
                is_verified:
                  type: boolean
  "/orgs/{id}/users":
    get:
      summary: List all users in org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: List all the users
          content: {}
  "/orgs/{id}/users/{user_id}":
    post:
      summary: Add User to Org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '201':
          description: Linked User to Org
          content: {}
    delete:
      summary: Remove user from org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Unlinked User from Org
          content: {}
  "/orgs/{id}/addresses":
    post:
      summary: Add address to org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '201':
          description: Create Location for Org
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                addr_1:
                  type: string
                addr_2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                zip:
                  type: string
              required:
              - addr_1
              - city
              - state
              - zip
    get:
      summary: List all addresses for org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: List all locations
          content: {}
  "/orgs/{id}/addresses/{address_id}":
    put:
      summary: Update address in org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: address_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Updated Address
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                addr_1: 123 Lane 4th st
                city: Bellevue
                state: WA
                zip: '99999'
    delete:
      summary: Remove address from org
      tags:
      - Orgs
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: address_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Delete address
          content: {}
  "/tournaments":
    post:
      summary: Creates New Tournament
      tags:
      - Tournaments
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Tournament Created
          content: {}
  "/tournaments/{id}":
    delete:
      summary: Delete Tournament
      tags:
      - Tournaments
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Tournament Deleted
          content: {}
  "/users":
    post:
      summary: Creates New User
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/registration_success"
        '409':
          description: User creation failed with invalid email
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/registration_failure"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
                is_enabled:
                  type: boolean
              required:
              - name
              - email
              - password
              - password_confirmation
  "/users/import":
    post:
      summary: Import batch of users
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Imported batch of users
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                batch:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      usattid:
                        type: integer
                      location:
                        type: string
                      homeclub:
                        type: string
                      rating:
                        type: integer
  "/users/partial":
    post:
      summary: Creates New User without username and password requirements
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Partial User created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/partial_user_for_tournament"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                rating:
                  type: integer
                usattid:
                  type: string
              required:
              - name
              - rating
              - usattid
  "/current_user":
    get:
      summary: Get the user belonging to the Authorization token
      tags:
      - Users
      security:
      - bearer_auth: []
      responses:
        '200':
          description: User retrieved
          content: {}
  "/users/{id}":
    get:
      summary: Get User by ID
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: User profile retrieved successfully
          content: {}
    put:
      summary: Edits existing User
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Update User fields successfully
          content: {}
        '404':
          description: Update User fails with non-existent user id
          content: {}
        '422':
          description: Update User fails edit when no params passed
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                is_enabled:
                  type: boolean
                profile_image:
                  type: string
  "/users/{id}/tournament_data":
    get:
      summary: Get User by ID
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Get user data for tournament
          content: {}
  "/users/{id}/roles":
    post:
      summary: Add Role
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: role
        in: query
        enum:
          player: 0
          admin: 1
          owner: 2
          systems_admin: 3
        required: true
        schema:
          type: string
      - name: org_id
        in: query
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Add Role
          content: {}
    delete:
      summary: Remove a Role
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: role
        in: query
        enum:
          player: 0
          admin: 1
          owner: 2
          systems_admin: 3
        required: true
        schema:
          type: string
      - name: org_id
        in: query
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Remove a Role
          content: {}
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
- url: https://nameless-spire-32644.herokuapp.com/
